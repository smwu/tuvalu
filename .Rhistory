levels=names_list))
}
colnames(mode_item_probs) <- c("Neo-Local", "Mixed-Local", "Mixed-Imported",
"Imported", "Item")
mode_plot <- mode_item_probs %>% gather("Pattern", "Level", -Item)
mode_plot$Pattern <- fct_rev(factor(mode_plot$Pattern, levels =
c("Imported", "Mixed-Imported",
"Mixed-Local", "Neo-Local")))
mode_plot %>% ggplot(aes(x=Pattern, y=Item, fill=Level)) +
geom_tile(color="black") +
geom_text(aes(label = Level), col="white", cex=2) +
scale_fill_gradient(trans="reverse") +
theme(legend.position="none") +
scale_x_discrete(labels = c("Neo-\nLocal", "Mixed-\nLocal",
"Mixed-\nImported", "Imported"))
}
plot_pattern_modes(lc4, names_by_local)
plot_pattern_modes(lc4, names_by_group)
df_table_3 <- strat_df[-7]
View(df_table_3)
rownames(df_table_3) <- strat_df[, 7]
colnames(df_table_3) <- c("N", "Cases", "Mixed-Local", "Neo-Local",
"Mixed-Imported", "Imported")
write.csv(df_table_3, "df_table_3.csv")
library(tidyverse)
library(readxl)
library(lubridate)
library(tableone)  # create Table 1
#Output file to excel
library(openxlsx)
#Make plot
library(corrplot)
library(poLCA)
library(insight)
library(forcats)
library(lme4)
library(rstanarm)
options(mc.cores = 4)
library(sjPlot)
library(flextable)
library(officer)
library(kableExtra)
library(epade)
library(tidyLPA)  # LMR test
library(ggpubr)  # grid of plots
library(gt)
#==================== Helper functions ================================
#Create functions to extract estimate, CI and p-values
specify_decimal <- function(x, k) trimws(format(round(x, k), nsmall=k))
linear_coef<-function(b){
cbind(names(b$coefficients[,1]),paste(specify_decimal(b$coefficients[,1],2)," (",specify_decimal(b$coefficients[,1]+qnorm(0.025)*b$coefficients[,2],2),"-",specify_decimal(b$coefficients[,1]+qnorm(c(.975))*b$coefficients[,2],2),", p=",specify_decimal(b$coefficients[,4],3),")",sep=""))
}
logistic_coef<-function(b){
cbind(names(b$coefficients[,1]),paste(specify_decimal(exp(b$coefficients[,1]),2)," (",specify_decimal(exp(b$coefficients[,1]+qnorm(0.025)*b$coefficients[,2]),2),"-",specify_decimal(exp(b$coefficients[,1]+qnorm(c(.975))*b$coefficients[,2]),2),", p=",specify_decimal(b$coefficients[,4],3),")",sep=""))
}
# Plot modal consumption levels for each pattern
plot_pattern_modes <- function(model, names_list = NULL) {
est_item_probs <- model$probs
mode_item_probs <- lapply(est_item_probs, function(x) apply(x, 1, which.max))
mode_item_probs <- as.data.frame(do.call("rbind", mode_item_probs))
if (is.null(names_list)) {
mode_item_probs$Item <- fct_rev(factor(rownames(mode_item_probs),
levels=rownames(mode_item_probs)))
} else {
mode_item_probs$Item <- fct_rev(factor(rownames(mode_item_probs),
levels=names_list))
}
colnames(mode_item_probs) <- c("Neo-Local", "Mixed-Local", "Mixed-Imported",
"Imported", "Item")
mode_plot <- mode_item_probs %>% gather("Pattern", "Level", -Item)
mode_plot$Pattern <- fct_rev(factor(mode_plot$Pattern, levels =
c("Imported", "Mixed-Imported",
"Mixed-Local", "Neo-Local")))
mode_plot %>% ggplot(aes(x=Pattern, y=Item, fill=Level)) +
geom_tile(color="black") +
geom_text(aes(label = Level), col="white", cex=2) +
scale_fill_gradient(trans="reverse") +
theme(legend.position="none") +
scale_x_discrete(labels = c("Neo-\nLocal", "Mixed-\nLocal",
"Mixed-\nImported", "Imported"))
}
tuv_diet_compl <- read.csv("diet_pattern_data.csv")
load("lc4.RData")
names_by_local <- c("Cassava", "Taro", "Breadfruit", "Cabbage", "Bird_nest_fern",
"Banana", "Coconut", "Papaya", "Pandanus", "Cucumber", "Fish",
"Pork", "Rice", "Potatoes", "Imp_fruits", "Imp_vegs",
"Chicken", "Lamb_beef", "Eggs", "Milk", "Sweetened_bevs",
"Ice_cream", "Instant_noodles", "Chips_biscuits", "Cake")
names_by_group <- c("Cassava", "Taro", "Rice", "Potatoes",
"Breadfruit", "Cabbage", "Bird_nest_fern", "Banana", "Coconut",
"Papaya", "Pandanus", "Cucumber", "Imp_fruits", "Imp_vegs",
"Fish", "Pork", "Chicken", "Lamb_beef",
"Eggs", "Milk",
"Sweetened_bevs", "Ice_cream", "Instant_noodles",
"Chips_biscuits", "Cake")
plot_pattern_modes(lc4, names_by_local)
# Plot modal consumption levels for each pattern
plot_pattern_modes <- function(model, names_list = NULL, mode_size, text_size) {
est_item_probs <- model$probs
mode_item_probs <- lapply(est_item_probs, function(x) apply(x, 1, which.max))
mode_item_probs <- as.data.frame(do.call("rbind", mode_item_probs))
if (is.null(names_list)) {
mode_item_probs$Item <- fct_rev(factor(rownames(mode_item_probs),
levels=rownames(mode_item_probs)))
} else {
mode_item_probs$Item <- fct_rev(factor(rownames(mode_item_probs),
levels=names_list))
}
colnames(mode_item_probs) <- c("Neo-Local", "Mixed-Local", "Mixed-Imported",
"Imported", "Item")
mode_plot <- mode_item_probs %>% gather("Pattern", "Level", -Item)
mode_plot$Pattern <- fct_rev(factor(mode_plot$Pattern, levels =
c("Imported", "Mixed-Imported",
"Mixed-Local", "Neo-Local")))
mode_plot %>% ggplot(aes(x=Pattern, y=Item, fill=Level)) +
geom_tile(color="black") +
geom_text(aes(label = Level), col="white", cex=mode_size) +
scale_fill_gradient(trans="reverse") +
theme(legend.position="none") +
scale_x_discrete(labels = c("Neo-\nLocal", "Mixed-\nLocal",
"Mixed-\nImported", "Imported")) +
theme(axis.text=element_text(size=text_size),
axis.title=element_text(size=text_size))
}
plot_pattern_modes(lc4, names_by_local, mode_size = 3, text_size = 12)
# Plot modal consumption levels for each pattern
plot_pattern_modes <- function(model, names_list = NULL, mode_size, text_size) {
est_item_probs <- model$probs
mode_item_probs <- lapply(est_item_probs, function(x) apply(x, 1, which.max))
mode_item_probs <- as.data.frame(do.call("rbind", mode_item_probs))
if (is.null(names_list)) {
mode_item_probs$Item <- fct_rev(factor(rownames(mode_item_probs),
levels=rownames(mode_item_probs)))
} else {
mode_item_probs$Item <- fct_rev(factor(rownames(mode_item_probs),
levels=names_list))
}
colnames(mode_item_probs) <- c("Neo-Local", "Mixed-Local", "Mixed-Imported",
"Imported", "Item")
mode_plot <- mode_item_probs %>% gather("Pattern", "Level", -Item)
mode_plot$Pattern <- fct_rev(factor(mode_plot$Pattern, levels =
c("Imported", "Mixed-Imported",
"Mixed-Local", "Neo-Local")))
mode_plot %>% ggplot(aes(x=Pattern, y=Item, fill=Level)) +
geom_tile(color="black") +
geom_text(aes(label = Level), col="white", cex=mode_size) +
scale_fill_gradient(trans="reverse") +
theme(legend.position="none") +
scale_x_discrete(labels = c("Neo-\nLocal", "Mixed-\nLocal",
"Mixed-\nImported", "Imported")) +
theme(axis.text=element_text(size=text_size),
axis.title=element_text(size=text_size + 1))
}
plot_pattern_modes(lc4, names_by_local, mode_size = 3, text_size = 11)
plot_pattern_modes(lc4, names_by_group, mode_size = 3, text_size = 11)
library(tidyverse)
library(readxl)
library(lubridate)
library(tableone)  # create Table 1
#Output file to excel
library(openxlsx)
#Make plot
library(corrplot)
library(poLCA)
library(insight)
library(forcats)
library(lme4)
library(rstanarm)
options(mc.cores = 4)
library(sjPlot)
library(flextable)
library(officer)
library(kableExtra)
library(epade)
library(tidyLPA)  # LMR test
library(ggpubr)  # grid of plots
library(gt)
#==================== Helper functions ================================
#Create functions to extract estimate, CI and p-values
specify_decimal <- function(x, k) trimws(format(round(x, k), nsmall=k))
linear_coef<-function(b){
cbind(names(b$coefficients[,1]),paste(specify_decimal(b$coefficients[,1],2)," (",specify_decimal(b$coefficients[,1]+qnorm(0.025)*b$coefficients[,2],2),"-",specify_decimal(b$coefficients[,1]+qnorm(c(.975))*b$coefficients[,2],2),", p=",specify_decimal(b$coefficients[,4],3),")",sep=""))
}
logistic_coef<-function(b){
cbind(names(b$coefficients[,1]),paste(specify_decimal(exp(b$coefficients[,1]),2)," (",specify_decimal(exp(b$coefficients[,1]+qnorm(0.025)*b$coefficients[,2]),2),"-",specify_decimal(exp(b$coefficients[,1]+qnorm(c(.975))*b$coefficients[,2]),2),", p=",specify_decimal(b$coefficients[,4],3),")",sep=""))
}
tuvalu4 <- read.csv("diet_pattern_data_analysis.csv")
get_output <- function(fit, exponentiate = TRUE) {
if (exponentiate) {
output <- data.frame(exp(fit$coefficients),
exp(posterior_interval(fit, prob = 0.95)[1:length(fit$coefficients),]))
colnames(output) <- c("Cond'l OR", "2.5%", "97.5%")
cutoff <- 1
} else {
output <- data.frame(fit$coefficients,
posterior_interval(fit, prob = 0.95)[1:length(fit$coefficients),])
colnames(output) <- c("Mean", "2.5%", "97.5%")
cutoff <- 0
}
output$signif <- 0
output$signif[(output$`2.5%` < cutoff) & (output$`97.5` < cutoff)] <- 1
output$signif[(output$`2.5%` > cutoff) & (output$`97.5` > cutoff)] <- 1
print(paste0("Number of observations: ", nobs(fit)))
print(output)
}
# `get_prev` calculates the prevalences given a vector of coefficients from
# a logistic regression model, where the first value corresponds to the log-odds
# in the reference group
# Since odds = prev/(1-prev), prev = odds/(1+odds)
get_prevs <- function(odds_coefs) {
prev <- numeric(length(odds_coefs))
prev[1] <- exp(odds_coefs[1]) / (1 + exp(odds_coefs[1]))
for (i in 2:length(odds_coefs)) {
# odds of level = OR * baseline_odds
odds_i <- exp(odds_coefs[i]) * exp(odds_coefs[1])
prev[i] <- odds_i / (1 + odds_i)
}
return(prev)
}
# From posterior samples, get posterior error probability (PEP) to control
# false discovery rate and S-type errors.
# PEP is P(est <= 0) in this case because all the estimates are positive
get_PEP <- function(fit, cols) {
post_samp <- as.data.frame(fit)
PEP <- apply(post_samp[, cols], 2, function(x) mean(x <= 0))
return(PEP)
}
tuvalu4 <- read.csv("diet_pattern_data_analysis.csv")
factor_cols <- c("region_c", "obesity_1", "obesity_3", "gender", "age_c",
"education_c", "income_c", "ncd", "marital", "smoking_c",
"alcohol_c", "latent_class", "Pattern", "exercise")
tuvalu4 <- tuvalu4 %>% mutate_at(factor_cols, as.factor)
get_strat_est <- function(fit, i) {
return(c(nobs(fit), sum(fit$y == 1), "1 ref",
paste0(outputs[[i]][2,1], " [", outputs[[i]][2, 2], ", ",
outputs[[i]][2,3], "]"),
paste0(outputs[[i]][3,1], " [", outputs[[i]][3, 2], ", ",
outputs[[i]][3,3], "]"),
paste0(outputs[[i]][4,1], " [", outputs[[i]][4, 2], ", ",
outputs[[i]][4,3], "]")))
}
#############
load("ob1_strat_models.RData")
table(tuvalu4$region_c)
attr(tuvalu4)
is.factor(tuvalu4$exercise)
set.seed(611)
fit_ob1_main <- stan_glmer(obesity_1 ~ latent_class + gender + age_center +
education_c + smoking_c + ncd + exercise,
data = tuvalu4[tuvalu4$region_c == 0, ],
family = binomial, adapt_delta = 0.999)
?stan_glmer
set.seed(611)
fit_ob1_main <- stan_glm(obesity_1 ~ latent_class + gender + age_center +
education_c + smoking_c + ncd + exercise,
data = tuvalu4[tuvalu4$region_c == 0, ],
family = binomial, adapt_delta = 0.999)
set.seed(612)
fit_ob1_outlying <- stan_glm(obesity_1 ~ latent_class + gender + age_center +
education_c + smoking_c + ncd + exercise,
data = tuvalu4[tuvalu4$region_c == 1, ],
family = binomial, adapt_delta = 0.999)
save(fit_ob1_f, fit_ob1_m, fit_ob1_hs, fit_ob1_more_hs, fit_ob1_smoke,
fit_ob1_no_smoke, fit_ob1_ncd, fit_ob1_no_ncd, fit_ob1_exer_h,
fit_ob1_exer_m, fit_ob1_exer_l, fit_ob1_main, fit_ob1_outlying,
file = "ob1_strat_models.RData")
outputs <- lapply(list(fit_ob1_f, fit_ob1_m, fit_ob1_hs, fit_ob1_more_hs,
fit_ob1_no_smoke, fit_ob1_smoke,
fit_ob1_no_ncd, fit_ob1_ncd, fit_ob1_exer_h,
fit_ob1_exer_m, fit_ob1_exer_l, fit_ob1_main,
fit_ob1_outlying),
function(x) format(round(get_output(x), 3), nsmall = 2))
strat_df <- as.data.frame(matrix(NA, nrow = 13, ncol = 7))
strat_df[, 7] <- c("Male", "Female", "<=High School", ">High School",
"Non-Smokers", "Current Smokers", "No NCD Reported",
"NCD Reported", "High", "Medium", "Low", "Main", "Outlying")
strat_df[1, -7] <- get_strat_est(fit_ob1_f, 1)
strat_df[2, -7] <- get_strat_est(fit_ob1_m, 2)
strat_df[3, -7] <- get_strat_est(fit_ob1_hs, 3)
strat_df[4, -7] <- get_strat_est(fit_ob1_more_hs, 4)
strat_df[5, -7] <- get_strat_est(fit_ob1_no_smoke, 5)
strat_df[6, -7] <- get_strat_est(fit_ob1_smoke, 6)
strat_df[7, -7] <- get_strat_est(fit_ob1_no_ncd, 7)
strat_df[8, -7] <- get_strat_est(fit_ob1_ncd, 8)
strat_df[9, -7] <- get_strat_est(fit_ob1_exer_h, 9)
strat_df[10, -7] <- get_strat_est(fit_ob1_exer_m, 10)
strat_df[11, -7] <- get_strat_est(fit_ob1_exer_l, 11)
# returns formatted stratified results for table
# Inputs
#   fit: Stratified model object
#   outputs: List of all stratified models rounded to 3 decimal places
#   i: Index in list of stratified models
get_strat_est <- function(fit, i, outputs) {
return(c(nobs(fit), sum(fit$y == 1), "1 ref",
paste0(outputs[[i]][2,1], " [", outputs[[i]][2, 2], ", ",
outputs[[i]][2,3], "]"),
paste0(outputs[[i]][3,1], " [", outputs[[i]][3, 2], ", ",
outputs[[i]][3,3], "]"),
paste0(outputs[[i]][4,1], " [", outputs[[i]][4, 2], ", ",
outputs[[i]][4,3], "]")))
}
# returns formatted stratified results for table
# Inputs
#   fit: Stratified model object
#   outputs: List of all stratified models rounded to 3 decimal places
#   i: Index in list of stratified models
get_strat_est <- function(fit, outputs, i) {
return(c(nobs(fit), sum(fit$y == 1), "1 ref",
paste0(outputs[[i]][2,1], " [", outputs[[i]][2, 2], ", ",
outputs[[i]][2,3], "]"),
paste0(outputs[[i]][3,1], " [", outputs[[i]][3, 2], ", ",
outputs[[i]][3,3], "]"),
paste0(outputs[[i]][4,1], " [", outputs[[i]][4, 2], ", ",
outputs[[i]][4,3], "]")))
}
strat_df[1, -7] <- get_strat_est(fit_ob1_f, outputs, 1)
strat_df[1, -7] <- get_strat_est(fit_ob1_f, outputs, 1)
strat_df[2, -7] <- get_strat_est(fit_ob1_m, outputs, 2)
strat_df[3, -7] <- get_strat_est(fit_ob1_hs, outputs, 3)
strat_df[4, -7] <- get_strat_est(fit_ob1_more_hs, outputs, 4)
strat_df[5, -7] <- get_strat_est(fit_ob1_no_smoke, outputs, 5)
strat_df[6, -7] <- get_strat_est(fit_ob1_smoke, outputs, 6)
strat_df[7, -7] <- get_strat_est(fit_ob1_no_ncd, outputs, 7)
strat_df[8, -7] <- get_strat_est(fit_ob1_ncd, outputs, 8)
strat_df[9, -7] <- get_strat_est(fit_ob1_exer_h, outputs, 9)
strat_df[10, -7] <- get_strat_est(fit_ob1_exer_m, outputs, 10)
strat_df[11, -7] <- get_strat_est(fit_ob1_exer_l, outputs, 11)
strat_df[12, -7] <- get_strat_est(fit_ob1_main, outputs, 12)
strat_df[13, -7] <- get_strat_est(fit_ob1_outlying, outputs, 13)
strat_df %>% gt(rowname_col = "V7") %>%
tab_header(title = "Table 3: Subgroup analyses of the association between dietary patterns and obesity") %>%
tab_stubhead(label = "Covariate") %>%
tab_spanner(
label = "Posterior OR estimate (95% credible interval)",
columns = c(V3, V4, V5, V6)
) %>%
tab_options(  # header color
stub.border.width = px(2),
column_labels.background.color = "#edf8fb",
row_group.background.color = "#feebe2"
)  %>%
cols_label(
V1 = "N",
V2 = "Cases",
V3 = "Mixed-Local",
V4 = "Neo-Local",
V5 = "Mixed-Imported",
V6 = "Imported") %>%
tab_row_group(
label = "Region",
rows = c(12, 13)
)
strat_df %>% gt(rowname_col = "V7") %>%
tab_header(title = "Table 3: Subgroup analyses of the association between dietary patterns and obesity") %>%
tab_stubhead(label = "Covariate") %>%
tab_spanner(
label = "Posterior OR estimate (95% credible interval)",
columns = c(V3, V4, V5, V6)
) %>%
tab_options(  # header color
stub.border.width = px(2),
column_labels.background.color = "#edf8fb",
row_group.background.color = "#feebe2"
)  %>%
cols_label(
V1 = "N",
V2 = "Cases",
V3 = "Mixed-Local",
V4 = "Neo-Local",
V5 = "Mixed-Imported",
V6 = "Imported") %>%
tab_row_group(
label = "Region",
rows = c(12, 13)
) %>%
tab_row_group(
label = "Exercise",
rows = c(9, 10, 11)
) %>%
tab_row_group(
label = "Reported NCD Status",
rows = c(7, 8)
) %>%
tab_row_group(
label = "Smoking Status",
rows = c(5, 6)
) %>%
tab_row_group(
label = "Education",
rows = c(3, 4)
) %>%
tab_row_group(
label = "Sex",
rows = c(1, 2)
) %>%
tab_style(
style = list(
cell_text(weight = "bold")
),
locations = cells_body(
columns = V4,
rows = c(2, 6, 8)
)
) %>%
tab_style(
style = list(
cell_text(weight = "bold")
),
locations = cells_body(
columns = V6,
rows = c(3, 5, 7, 10)
)
)
df_table_3 <- strat_df[-7]
rownames(df_table_3) <- strat_df[, 7]
colnames(df_table_3) <- c("N", "Cases", "Mixed-Local", "Neo-Local",
"Mixed-Imported", "Imported")
write.csv(df_table_3, "df_table_3.csv")
# Age
g1 <- tuvalu4 %>% ggplot(aes(x = age, group = Pattern, fill = Pattern, col = Pattern)) +
theme_bw() +
geom_density(alpha = 0.4) +
ggtitle("Dietary Patterns by Age") + xlab("Age") + ylab("Density")
# Sex
g2 <- tuvalu4 %>% ggplot(aes(x = gender, fill = Pattern, col = Pattern)) +
theme_bw() +
geom_bar(position = "dodge") +
scale_x_discrete(labels = c("M", "F")) +
facet_grid(~Pattern) +
ggtitle("Dietary Patterns by Sex") + xlab("Sex") + ylab("Count")
# Education
g3 <- tuvalu4 %>% filter(!is.na(education_c)) %>%
ggplot(aes(x = education_c, fill = Pattern, col = Pattern)) +
theme_bw() +
geom_bar(position = "dodge") +
scale_x_discrete(labels = c("<=HS", ">HS")) +
facet_grid(~Pattern) +
ggtitle("Dietary Patterns by Education") + xlab("Education") + ylab("Count")
# Region
g4 <- tuvalu4 %>% ggplot(aes(x = region_c, fill = Pattern, col = Pattern)) +
theme_bw() +
geom_bar(position = "dodge") +
scale_x_discrete(labels = c("Main", "Other")) +
facet_grid(~Pattern) +
ggtitle("Dietary Patterns by Region") + xlab("Region") + ylab("Count")
# NCD
g5 <- tuvalu4 %>% filter(!is.na(ncd)) %>%
ggplot(aes(x = ncd, fill = Pattern, col = Pattern)) +
theme_bw() +
geom_bar(position = "dodge") +
scale_x_discrete(labels = c("No", "Yes")) +
facet_grid(~Pattern) +
ggtitle("Dietary Patterns by NCD Status") + xlab("NCD Reported") + ylab("Count")
# Smoking
g6 <- tuvalu4 %>% filter(!is.na(smoking_c)) %>%
ggplot(aes(x = smoking_c, fill = Pattern, col = Pattern)) +
theme_bw() +
geom_bar(position = "dodge") +
scale_x_discrete(labels = c("No", "Yes")) +
facet_grid(~Pattern) +
ggtitle("Dietary Patterns by Smoking") + xlab("Smoking Status") + ylab("Count")
# Exercise
g7 <- tuvalu4 %>% filter(!is.na(exercise)) %>%
ggplot(aes(x = exercise, fill = Pattern, col = Pattern)) +
theme_bw() +
geom_bar(position = "dodge") +
scale_x_discrete(labels = c("High", "Med", "Low")) +
facet_grid(~Pattern) +
ggtitle("Dietary Patterns by Exercise") + xlab("Exercise") + ylab("Count")
?ggsave
ggsave(filename = "supp_fig_1_age", plot = g1)
getwd()
ggsave(filename = "supp_fig_1_age.png", plot = g1)
ggsave(filename = "supp_fig_1_sex.png", plot = g2)
ggsave(filename = "supp_fig_1_educ.png", plot = g3)
ggsave(filename = "supp_fig_1_region.png", plot = g4)
ggsave(filename = "supp_fig_1_ncd.png", plot = g5)
ggsave(filename = "supp_fig_1_smoking.png", plot = g6)
ggsave(filename = "supp_fig_1_exercise.png", plot = g7)
plot(tuvalu4$Weight..kg., tuvalu4$Height..cm.)
table(tuvalu4$region_4group_cat)
tuvalu4 %>% ggplot(aes(x = gender, y = Weight..kg.)) %>% geom_point()
tuvalu4 %>% ggplot(aes(x = gender, y = Weight..kg.)) + geom_point()
tuvalu4 %>% ggplot(aes(x = gender, y = Weight..kg.)) + geom_boxplot()
tuvalu4 %>% ggplot(aes(x = gender, y = Weight..kg., fill = gender)) + geom_boxplot() + theme_bw() + xlab("Sex") + ylab("Weight (kg)")
tuvalu4 %>% ggplot(aes(x = gender, y = Weight..kg.)) + geom_boxplot() + theme_bw() + xlab("Sex") + ylab("Weight (kg)") + ggtitle(Weight by Sex (1=Male, 2=Female))
tuvalu4 %>% ggplot(aes(x = gender, y = Weight..kg.)) + geom_boxplot() + theme_bw() + xlab("Sex") + ylab("Weight (kg)") + ggtitle(Weight by Sex (1=Male, 2=Female))
tuvalu4 %>% ggplot(aes(x = gender, y = Weight..kg.)) + geom_boxplot() + theme_bw() + xlab("Sex") + ylab("Weight (kg)") + ggtitle("Weight by Sex (1=Male, 2=Female)")
# install the package needed, 'install.packages("")' for installation
# use library to call them
library(tidyverse)
library(readxl)
library(lubridate)
library(tableone)  # create Table 1
#Output file to excel
library(openxlsx)
#Make plot
library(corrplot)
library(poLCA)
library(insight)
library(forcats)
library(lme4)
library(rstanarm)
options(mc.cores = 4)
library(sjPlot)
library(flextable)
library(officer)
library(kableExtra)
library(epade)
library(tidyLPA)  # LMR test
library(ggpubr)  # grid of plots
library(gt)
